program MergeSort;
	
classes
	MergeSortClass
	methods
		mergeSort(Array : vetor; Intenger : inicio, fim);
		merge(ArrayIntenger: vetor; Intenger: inicio,meio,fim)



variables 
	MergeSortClass : merge_sort;
	ArrayInteger : vetor = [4,8,5,9,7];
	ArrayInteger : vetorAuxiliar = []  

methods 
	MergeSortClass.mergeSort
	vars
		ArrayInteger : vetor;
		Intenger : meio = vetor.size()/2;
		Intenger : inicio = 0;
		Intenger : fim = vetor.size()
	begin 
		if inicio < fim then
		begin
			merge_sort.mergeSort(vetor,inicio,meio);
			merge_sort.mergeSort(vetor,meio+1,fim);
			merge_sort.merge(vetor,inicio,meio,fim)
		end 
	end;

	MergeSortClass.merge
	vars
		ArrayIntenger: vetor;
		Intenger: inicio,meio,fim;
		Intenger: ponteiroEsquerdo, ponteiroDireito, ponteiroAux, tamanho 
	begin
		ponteiroEsquerdo := inicio;
		ponteiroDireito := meio+1;
		ponteiroAux := 0;
		tamanho:= vetor.size();

		while ponteiroEsquerdo <= meio and ponteiroDireito <= fim do
		begin
			if vetor[ponteiroEsquerdo] < vetor[ponteiroDireito] then
			begin
				vetorAuxiliar[ponteiroAux] := vetor[ponteiroEsquerdo];
				++ponteiroEsquerdo
			end
			else
			begin
				vetorAuxiliar[ponteiroAux] := vetor[ponteiroDireito];
				++ponteiroDireito
			end;
			++ponteiroAux
		end;
		
		while ponteiroEsquerdo <= meio do
		begin
			vetAuxiliar[ponteiroAux] := vetor[ponteiroEsquerdo];
			++ponteiroAux;
			++ponteiroEsquerdo
		end;

		while ponteiroDireito <= fim do
		begin
			vetAuxiliar[ponteiroAux] := vetor[ponteiroDireito];
			++ponteiroAux;
			++ponteiroDireito
		end;

		for ponteiroAux := inicio to fim do
		begin
			vetor[ponteiroAux] := vetorAuxiliar[ponteiroAux]
		end
	end


begin
	merge_sort.mergeSort(vetor)
end.
